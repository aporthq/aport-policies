{
  "id": "finance.payment.charge.v1",
  "name": "Payment Charge Policy",
  "description": "Pre-act governance for agent-initiated payments. Enforces per-currency caps, merchant/region allowlists, category blocks, assurance minimums, and idempotency.",
  "version": "1.0.0",
  "status": "active",
  "requires_capabilities": ["payments.charge"],
  "min_assurance": "L2",
  "limits_required": [
    "currency_limits",
    "allowed_merchant_ids",
    "allowed_countries",
    "blocked_categories",
    "max_items_per_tx",
    "require_assurance_at_least",
    "idempotency_required"
  ],
  "required_fields": [
    "amount",
    "currency",
    "merchant_id",
    "region",
    "items",
    "idempotency_key"
  ],
  "optional_fields": ["shipping_country", "risk_score"],
  "enforcement": {
    "currency_supported": true,
    "region_in": true,
    "idempotency_required": true,
    "amount_lte": "limits.payments.charge.currency_limits.{currency}.max_per_tx",
    "daily_cap_check": "limits.payments.charge.currency_limits.{currency}.daily_cap",
    "merchant_allowlist": "limits.payments.charge.allowed_merchant_ids",
    "country_allowlist": "limits.payments.charge.allowed_countries",
    "category_blocklist": "limits.payments.charge.blocked_categories",
    "item_count_cap": "limits.payments.charge.max_items_per_tx"
  },
  "mcp": {
    "require_allowlisted_if_present": true
  },
  "advice": [
    "Cache /verify with ETag; 60s TTL",
    "Subscribe to status webhooks for instant suspend",
    "Log all charge attempts for Verifiable Attestation",
    "Implement daily spend tracking per currency to prevent abuse",
    "Always use unique idempotency keys to prevent duplicate charges",
    "Provide clear error messages to help agents self-remediate",
    "Maintain merchant allowlists for trusted partners",
    "Block high-risk categories (weapons, illicit goods)"
  ],
  "required_context": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "amount",
      "currency",
      "merchant_id",
      "region",
      "items",
      "idempotency_key"
    ],
    "properties": {
      "amount": {
        "type": "integer",
        "minimum": 1,
        "description": "Minor units (e.g., cents)"
      },
      "currency": {
        "type": "string",
        "pattern": "^[A-Z]{3}$",
        "description": "ISO 4217 currency code"
      },
      "merchant_id": {
        "type": "string",
        "description": "Merchant identifier"
      },
      "region": {
        "type": "string",
        "description": "Geographic region"
      },
      "shipping_country": {
        "type": "string",
        "description": "Shipping country code"
      },
      "items": {
        "type": "array",
        "minItems": 1,
        "description": "Array of items being purchased",
        "items": {
          "type": "object",
          "required": ["sku", "qty", "price"],
          "properties": {
            "sku": {
              "type": "string",
              "description": "Stock keeping unit"
            },
            "qty": {
              "type": "integer",
              "minimum": 1,
              "description": "Quantity"
            },
            "name": {
              "type": "string",
              "maxLength": 200,
              "description": "Item name for audit and compliance"
            },
            "price": {
              "type": "integer",
              "minimum": 1,
              "description": "Price in minor currency units (e.g., cents)"
            },
            "category": {
              "type": "string",
              "description": "Item category"
            }
          }
        }
      },
      "risk_score": {
        "type": "number",
        "minimum": 0,
        "maximum": 100,
        "description": "Risk score (0-100)"
      },
      "idempotency_key": {
        "type": "string",
        "minLength": 8,
        "description": "Idempotency key for duplicate prevention"
      }
    }
  },
  "evaluation_rules": [
    {
      "name": "passport_status_active",
      "condition": "passport.status == 'active'",
      "deny_code": "oap.passport_suspended",
      "description": "Passport must be active"
    },
    {
      "name": "assurance_minimum",
      "condition": "passport.assurance_level >= limits.payments.charge.require_assurance_at_least",
      "deny_code": "oap.assurance_insufficient",
      "description": "Assurance level must meet minimum requirement"
    },
    {
      "name": "currency_supported",
      "condition": "currency in limits.payments.charge.currency_limits",
      "deny_code": "oap.currency_unsupported",
      "description": "Currency must be supported"
    },
    {
      "name": "per_tx_amount_cap",
      "condition": "amount <= limits.payments.charge.currency_limits[currency].max_per_tx",
      "deny_code": "oap.limit_exceeded",
      "description": "Amount must not exceed per-transaction limit"
    },
    {
      "name": "item_count_cap",
      "condition": "items.length <= limits.payments.charge.max_items_per_tx",
      "deny_code": "oap.limit_exceeded",
      "description": "Item count must not exceed limit"
    },
    {
      "name": "merchant_allowed",
      "condition": "merchant_id in limits.payments.charge.allowed_merchant_ids OR limits.payments.charge.allowed_merchant_ids is empty",
      "deny_code": "oap.merchant_forbidden",
      "description": "Merchant must be in allowlist"
    },
    {
      "name": "country_allowed",
      "condition": "shipping_country in limits.payments.charge.allowed_countries OR limits.payments.charge.allowed_countries is empty",
      "deny_code": "oap.region_blocked",
      "description": "Shipping country must be allowed"
    },
    {
      "name": "category_block",
      "condition": "NOT any(item.category in limits.payments.charge.blocked_categories for item in items)",
      "deny_code": "oap.category_blocked",
      "description": "Items must not be in blocked categories"
    },
    {
      "name": "daily_cap_check",
      "condition": "daily_total + amount <= limits.payments.charge.currency_limits[currency].daily_cap",
      "deny_code": "oap.limit_exceeded",
      "description": "Daily cap must not be exceeded"
    },
    {
      "name": "idempotency_check",
      "condition": "idempotency_key not in recent_keys",
      "deny_code": "oap.idempotency_conflict",
      "description": "Idempotency key must be unique"
    }
  ],
  "cache": {
    "default_ttl_seconds": 60,
    "suspend_invalidate_seconds": 30
  },
  "deprecation": null,
  "created_at": "2025-01-30T00:00:00Z",
  "updated_at": "2025-01-30T00:00:00Z"
}
